// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  telephoneNumber String
  photoUrl  String?
  currentPoints Int 
  
  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String

  @@map("users")
}

model UserLocation{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude Float
  longitude Float

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String
}

model UserAccount{
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username String @unique
  password String
  role Role   @default(USER)

  User User[]
  Onboarding Onboarding[]
  paymentDetails PaymentDetails[]
  UserLocation UserLocation[]
  UserTicket UserTicket[]
  Club Club[]

  @@map("user_accounts")
}

model Onboarding{
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  residence String?
  vancouverArea String?
  nightlifeType String?
  outingFrequency String?
  favouriteInstrument String?
  drinkOfChoice String?
  groupOrAlone String?
  arrivalTime String?
  appealingPromotion String?
  notificationPreference String?
  nighlifeEnvironment String?
  foodImportance String?
  drinkPreference String?
  reasonForNightlife String?

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String


  @@map("onboardings")
}

model PaymentDetails{
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentMethod String
  cardNumber String
  expiryDate DateTime
  cardHolderName String
  cvc String

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String

  @@map("payment_details")
}


model Club{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String

  clubOwner UserAccount @relation(fields: [clubOwnerId], references: [id])
  clubOwnerId String

  clubLocation ClubLocation @relation(fields: [clubLocationId], references: [id])
  clubLocationId String

  Event Event[]
  Promotion Promotion[]

  @@map("clubs")
}

model ClubLocation{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  latitude Float
  longitude Float
  address String
  postalCode String
  city String
  country String

  Club Club[]

  @@map("club_locations")
}

model UserTicket{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String

  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  @@map("user_tickets")
}

model Event{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  dateTime DateTime
  description String

  club Club @relation(fields: [clubId], references: [id])
  clubId String

  ticket Ticket[]

  @@map("events")

} 

model Ticket{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  ticketAddOn TicketAddOn[]
  ticketType TicketType[]
  UserTicket UserTicket[]

  @@map("tickets")
}

model TicketAddOn{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  price Float

  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  @@map("ticket_add_ons")
}

model TicketType{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  price Float
  currentQuantity Int
  totalQuantity Int

  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  @@map("ticket_types")
}

model Promotion{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String
  startDate DateTime
  endDate DateTime

  club Club @relation(fields: [clubId], references: [id])
  clubId String

  @@map("promotions")
}