// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  telephoneNumber String
  photoUrl  String?
  currentPoints Int 
  email String @unique
  role Role @default(USER)

  Onboarding Onboarding[]
  paymentDetails PaymentDetails[]
  UserLocation UserLocation[]
  UserTicket UserTicket[]
  Club Club[]
  UserPromotionEvent UserPromotionEvent[]
  
  @@map("users")
}

model UserLocation{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude Float
  longitude Float

  user User @relation(fields: [userId], references: [id])
  userId String

}

model Onboarding{
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  residence String?
  vancouverArea String?
  nightlifeType String?
  outingFrequency String?
  favouriteInstrument String?
  drinkOfChoice String?
  groupOrAlone String?
  arrivalTime String?
  appealingPromotion String?
  notificationPreference String?
  nighlifeEnvironment String?
  foodImportance String?
  drinkPreference String?
  reasonForNightlife String?

  user User @relation(fields: [userId], references: [id])
  userId String


  @@map("onboardings")
}

model PaymentDetails{
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentMethod String
  cardNumber String
  expiryDate DateTime
  cardHolderName String
  cvc String

  user User @relation(fields: [userId], references: [id])
  userId String

  @@map("payment_details")
}


model Club{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String

  clubOwner User @relation(fields: [clubOwnerId], references: [id])
  clubOwnerId String

  clubLocation ClubLocation @relation(fields: [clubLocationId], references: [id])
  clubLocationId String

  Event Event[]
  ClubNight ClubNight[]
  Promotion Promotion[]

  @@map("clubs")
}

model ClubLocation{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  latitude Float
  longitude Float
  address String
  postalCode String
  city String
  country String

  Club Club[]

  @@map("club_locations")
}

model UserTicket{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId String

  ticket Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  ticketAddOn TicketAddOn @relation(fields: [ticketAddOnId], references: [id])
  ticketAddOnId String  

  @@map("user_tickets")
}

model Event{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  dateTime DateTime
  description String

  club Club @relation(fields: [clubId], references: [id])
  clubId String

  ticketType TicketType[]
  UserPromotionEvent UserPromotionEvent[]

  @@map("events")

} 

model ClubNight{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  dateTime DateTime
  description String

  club Club @relation(fields: [clubId], references: [id])
  clubId String

  TicketType TicketType[]
  UserPromotionEvent UserPromotionEvent[]


  @@map("club_nights")
}

model Ticket{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventType String

  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String

  UserTicket UserTicket[]

  @@map("tickets")
}

model TicketAddOn{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  price Float

  UserTicket UserTicket[]

  @@map("ticket_add_ons")
}

model TicketType{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  price Float
  currentQuantity Int
  totalQuantity Int

  event Event @relation(fields: [eventId], references: [id])
  eventId String

  clubNight ClubNight @relation(fields: [clubNightId], references: [id])
  clubNightId String

  ticket Ticket[]

  @@map("ticket_types")
}

model Promotion{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String
  startDate DateTime
  endDate DateTime
  pointsRequired Int

  club Club @relation(fields: [clubId], references: [id])
  clubId String
  
  UserPromotionEvent UserPromotionEvent[]


  @@map("promotions")
}

model UserPromotionEvent{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  userId String

  promotion Promotion @relation(fields: [promotionId], references: [id])
  promotionId String
  
  event Event? @relation(fields: [eventId], references: [id])
  eventId String?

  clubNight ClubNight? @relation(fields: [clubNightId], references: [id])
  clubNightId String?

  @@map("user_promotion_events")
}